#!/usr/bin/env bash

if tmux list-sessions &>/dev/null; then # tmux server is running
	if [ "$TMUX" ]; then                   # inside tmux
		T_RUNTYPE="attached"
	else # outside tmux
		T_RUNTYPE="detached"
	fi
else # tmux server is not running
	T_RUNTYPE="serverless"
fi

if [ "$1" = "-h" ] || [ "$1" == "--help" ]; then # help argument
	printf "\n"
	printf "\033[1m  t - the smart tmux session manager\033[0m\n"
	printf "\033[37m  https://github.com/joshmedeski/t-smart-tmux-session-manager\n"
	printf "\n"
	printf "\033[32m  Run interactive mode\n"
	printf "\033[34m      t\n"
	printf "\033[34m        ctrl-s list only tmux sessions\n"
	printf "\033[34m        ctrl-x list only zoxide results\n"
	printf "\033[34m        ctrl-d list directories\n"
	printf "\n"
	printf "\033[32m  Go to session (matches tmux session, zoxide result, or directory)\n"
	printf "\033[34m      t {name}\n"
	printf "\n"
	if [ "$T_RUNTYPE" == "attached" ]; then
		printf "\033[32m  Open popup (while in tmux)\n"
		T_BIND=$(tmux show-option -gvq "@t-bind")
		if [ "$T_BIND" = "" ]; then
			T_BIND="T"
		fi
		printf "\033[34m      <prefix>+%s\n" "$T_BIND"
		printf "\033[34m        ctrl-s list only tmux sessions\n"
		printf "\033[34m        ctrl-x list only zoxide results\n"
		printf "\033[34m        ctrl-d list directories\n"
	fi
	printf "\n"
	printf "\033[32m  Show help\n"
	printf "\033[34m      t -h\n"
	printf "\033[34m      t --help\n"
	printf "\n"
	exit 0
fi

get_fzf_prompt() {
	local fzf_prompt
	local fzf_default_prompt='>  '
	if [ "$T_RUNTYPE" != "serverless" ]; then
		fzf_prompt="$(tmux show -gqv '@t-fzf-prompt')"
	fi
	[ -n "$fzf_prompt" ] && echo "$fzf_prompt" || echo "$fzf_default_prompt"
}

HOME_REPLACER=""                                          # default to a noop
echo "$HOME" | grep -E "^[a-zA-Z0-9\-_/.@]+$" &>/dev/null # chars safe to use in sed
HOME_SED_SAFE=$?
if [ $HOME_SED_SAFE -eq 0 ]; then # $HOME should be safe to use in sed
	HOME_REPLACER="s|^$HOME/|~/|"
fi

BORDER_LABEL=" t - smart tmux session manager "
HEADER=" ctrl-s: sessions / ctrl-x: zoxide / ctrl-d: directory"
PROMPT=$(get_fzf_prompt)
SESSION_BIND="ctrl-s:change-prompt(sessions> )+reload(tmux list-sessions -F '#S')"
ZOXIDE_BIND="ctrl-x:change-prompt(zoxide> )+reload(zoxide query -l | sed -e \"$HOME_REPLACER\")"

if fd --version &>/dev/null; then # fd is installed
	DIR_BIND="ctrl-d:change-prompt(directory> )+reload(cd $HOME && echo $HOME; fd --type d --hidden --absolute-path --color never --exclude .git --exclude node_modules)"
else # fd is not installed
	DIR_BIND="ctrl-d:change-prompt(directory> )+reload(cd $HOME && find ~+ -type d -name node_modules -prune -o -name .git -prune -o -type d -print)"
fi

get_sessions_by_mru() {
	tmux list-sessions -F '#{session_last_attached} #{session_name}' | sort --numeric-sort --reverse | awk '{print $2}'
}

if [ $# -eq 1 ]; then # argument provided
	zoxide query "$1" &>/dev/null
	ZOXIDE_RESULT_EXIT_CODE=$?
	if [ $ZOXIDE_RESULT_EXIT_CODE -eq 0 ]; then # zoxide result found
		RESULT=$(zoxide query "$1")
	else # no zoxide result found
		ls "$1" &>/dev/null
		LS_EXIT_CODE=$?
		if [ $LS_EXIT_CODE -eq 0 ]; then # directory found
			RESULT=$1
		else # no directory found
			echo "No directory found."
			exit 1
		fi
	fi
else # argument not provided
	case $T_RUNTYPE in
	attached)
		RESULT=$(
			(get_sessions_by_mru && (zoxide query -l | sed -e "$HOME_REPLACER")) | fzf-tmux \
				--bind "$DIR_BIND" \
				--bind "$SESSION_BIND" \
				--bind "$ZOXIDE_BIND" \
				--border-label "$BORDER_LABEL" \
				--header "$HEADER" \
				--no-sort \
				--prompt "$PROMPT" \
				-p 60%,50%
		)
		;;
	detached)
		RESULT=$(
			(get_sessions_by_mru && (zoxide query -l | sed -e "$HOME_REPLACER")) | fzf \
				--bind "$DIR_BIND" \
				--bind "$SESSION_BIND" \
				--bind "$ZOXIDE_BIND" \
				--border-label "$BORDER_LABEL" \
				--header "$HEADER" \
				--no-sort \
				--prompt "$PROMPT"
		)
		;;
	serverless)
		RESULT=$(
			(zoxide query -l | sed -e "$HOME_REPLACER") | fzf \
				--bind "$DIR_BIND" \
				--border-label "$BORDER_LABEL" \
				--header " ctrl-d: directory" \
				--no-sort \
				--prompt "$PROMPT"
		)
		;;
	esac
fi

if [ "$RESULT" = "" ]; then # no result
	exit 0                     # exit silently
fi

if [ $HOME_SED_SAFE -eq 0 ]; then
	RESULT=$(echo "$RESULT" | sed -e "s|^~/|$HOME/|") # get real home path back
fi

zoxide add "$RESULT" &>/dev/null # add to zoxide database
FOLDER=$(basename "$RESULT")
SESSION_NAME=$(echo "$FOLDER" | tr ' .:' '_')

if [ "$T_RUNTYPE" != "serverless" ]; then
	SESSION=$(tmux list-sessions -F '#S' | grep "^$SESSION_NAME$") # find existing session
fi

if [ "$SESSION" = "" ]; then # session is missing
	SESSION="$SESSION_NAME"
	tmux new-session -d -s "$SESSION" -c "$RESULT" # create session
fi

case $T_RUNTYPE in # attach to session
attached)
	tmux switch-client -t "$SESSION"
	;;
detached) ;&
serverless)
	tmux attach -t "$SESSION"
	;;
esac
